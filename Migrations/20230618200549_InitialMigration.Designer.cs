// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCC_API.Models.Database;

#nullable disable

namespace TCC_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230618200549_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCC_API.Models.Database.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Fortaleza"
                        },
                        new
                        {
                            Id = 2L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Aracati"
                        },
                        new
                        {
                            Id = 3L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Aquiraz"
                        },
                        new
                        {
                            Id = 4L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Acaraú"
                        },
                        new
                        {
                            Id = 5L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Viçosa do Ceará"
                        },
                        new
                        {
                            Id = 6L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Antonina do Norte"
                        },
                        new
                        {
                            Id = 7L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Abaiara"
                        },
                        new
                        {
                            Id = 8L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Acarape"
                        },
                        new
                        {
                            Id = 9L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Sobral"
                        },
                        new
                        {
                            Id = 10L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Crato"
                        },
                        new
                        {
                            Id = 11L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Juazeiro do Norte"
                        },
                        new
                        {
                            Id = 12L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Itapipoca"
                        },
                        new
                        {
                            Id = 13L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Canindé"
                        },
                        new
                        {
                            Id = 14L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Massapê"
                        },
                        new
                        {
                            Id = 15L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Martinópole"
                        },
                        new
                        {
                            Id = 16L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Granja"
                        },
                        new
                        {
                            Id = 17L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Uruoca"
                        },
                        new
                        {
                            Id = 18L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Senador Sá"
                        },
                        new
                        {
                            Id = 19L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Tianguá"
                        },
                        new
                        {
                            Id = 20L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Frecheirinha"
                        },
                        new
                        {
                            Id = 21L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "São Benedito"
                        },
                        new
                        {
                            Id = 22L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Jijoca"
                        },
                        new
                        {
                            Id = 23L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Cruz"
                        },
                        new
                        {
                            Id = 24L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Meruoca"
                        },
                        new
                        {
                            Id = 25L,
                            DataCriacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Estado = "CE",
                            Nome = "Camocim"
                        });
                });

            modelBuilder.Entity("TCC_API.Models.Database.Rota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdCidade")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdRota");

                    b.ToTable("RotaParadas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRotaParada")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdRotaParada");

                    b.ToTable("RotaParadaHorarios");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Distancia")
                        .HasColumnType("double precision");

                    b.Property<long>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdRota");

                    b.HasIndex("IdRotaParadaDestino");

                    b.HasIndex("IdRotaParadaOrigem");

                    b.ToTable("RotaPrecos");
                });

            modelBuilder.Entity("TCC_API.Models.Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany("Paradas")
                        .HasForeignKey("IdRota");

                    b.Navigation("Cidade");

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParada")
                        .WithMany("Horarios")
                        .HasForeignKey("IdRotaParada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaParada");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaDestino")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaDestino");

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaOrigem")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaOrigem");

                    b.Navigation("Rota");

                    b.Navigation("RotaParadaDestino");

                    b.Navigation("RotaParadaOrigem");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Rota", b =>
                {
                    b.Navigation("Paradas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.Navigation("Horarios");
                });
#pragma warning restore 612, 618
        }
    }
}
