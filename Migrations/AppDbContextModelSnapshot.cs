// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCC_API.Models.Database;

#nullable disable

namespace TCC_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCC_API.Models.Database.Carro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdMotorista")
                        .HasColumnType("bigint");

                    b.Property<int>("Passageiros")
                        .HasColumnType("integer");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdMotorista");

                    b.ToTable("Carros", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9363),
                            IdMotorista = 1L,
                            Passageiros = 10,
                            Placa = "HWI8828"
                        });
                });

            modelBuilder.Entity("TCC_API.Models.Database.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cidades", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9177),
                            Estado = "CE",
                            Nome = "Fortaleza"
                        },
                        new
                        {
                            Id = 2L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9186),
                            Estado = "CE",
                            Nome = "Aracati"
                        },
                        new
                        {
                            Id = 3L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9187),
                            Estado = "CE",
                            Nome = "Aquiraz"
                        },
                        new
                        {
                            Id = 4L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9188),
                            Estado = "CE",
                            Nome = "Acaraú"
                        },
                        new
                        {
                            Id = 5L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9189),
                            Estado = "CE",
                            Nome = "Viçosa do Ceará"
                        },
                        new
                        {
                            Id = 6L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9190),
                            Estado = "CE",
                            Nome = "Antonina do Norte"
                        },
                        new
                        {
                            Id = 7L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9191),
                            Estado = "CE",
                            Nome = "Abaiara"
                        },
                        new
                        {
                            Id = 8L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9192),
                            Estado = "CE",
                            Nome = "Acarape"
                        },
                        new
                        {
                            Id = 9L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9193),
                            Estado = "CE",
                            Nome = "Sobral"
                        },
                        new
                        {
                            Id = 10L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9194),
                            Estado = "CE",
                            Nome = "Crato"
                        },
                        new
                        {
                            Id = 11L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9195),
                            Estado = "CE",
                            Nome = "Juazeiro do Norte"
                        },
                        new
                        {
                            Id = 12L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9196),
                            Estado = "CE",
                            Nome = "Itapipoca"
                        },
                        new
                        {
                            Id = 13L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9197),
                            Estado = "CE",
                            Nome = "Canindé"
                        },
                        new
                        {
                            Id = 14L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9198),
                            Estado = "CE",
                            Nome = "Massapê"
                        },
                        new
                        {
                            Id = 15L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9199),
                            Estado = "CE",
                            Nome = "Martinópole"
                        },
                        new
                        {
                            Id = 16L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9200),
                            Estado = "CE",
                            Nome = "Granja"
                        },
                        new
                        {
                            Id = 17L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9201),
                            Estado = "CE",
                            Nome = "Uruoca"
                        },
                        new
                        {
                            Id = 18L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9202),
                            Estado = "CE",
                            Nome = "Senador Sá"
                        },
                        new
                        {
                            Id = 19L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9203),
                            Estado = "CE",
                            Nome = "Tianguá"
                        },
                        new
                        {
                            Id = 20L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9204),
                            Estado = "CE",
                            Nome = "Frecheirinha"
                        },
                        new
                        {
                            Id = 21L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9236),
                            Estado = "CE",
                            Nome = "São Benedito"
                        },
                        new
                        {
                            Id = 22L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9237),
                            Estado = "CE",
                            Nome = "Jijoca"
                        },
                        new
                        {
                            Id = 23L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9238),
                            Estado = "CE",
                            Nome = "Cruz"
                        },
                        new
                        {
                            Id = 24L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9239),
                            Estado = "CE",
                            Nome = "Meruoca"
                        },
                        new
                        {
                            Id = 25L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9240),
                            Estado = "CE",
                            Nome = "Camocim"
                        });
                });

            modelBuilder.Entity("TCC_API.Models.Database.Motorista", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Motoristas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9348),
                            DataNascimento = new DateTime(1998, 11, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            Documento = "123.123.123-12",
                            IdUsuario = 1L,
                            Nome = "Abraão Costa"
                        });
                });

            modelBuilder.Entity("TCC_API.Models.Database.Rota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Rotas", (string)null);
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdCarro")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCidade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdCarro");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdRota");

                    b.ToTable("RotaParadas", (string)null);
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRotaParada")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdRotaParada");

                    b.ToTable("RotaParadaHorarios", (string)null);
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdRota");

                    b.HasIndex("IdRotaParadaDestino");

                    b.HasIndex("IdRotaParadaOrigem");

                    b.ToTable("RotaPrecos", (string)null);
                });

            modelBuilder.Entity("TCC_API.Models.Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCriacao = new DateTime(2023, 3, 20, 18, 14, 56, 769, DateTimeKind.Utc).AddTicks(9337),
                            Email = "abraaocrl@email.com.br",
                            Nome = "Abraão",
                            Senha = "827CCB0EEA8A706C4C34A16891F84E7B",
                            Sobrenome = "Costa",
                            Username = "abraaocrl"
                        });
                });

            modelBuilder.Entity("TCC_API.Models.Database.Carro", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("IdMotorista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Motorista", b =>
                {
                    b.HasOne("TCC_API.Models.Database.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("IdCarro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Cidade");

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParada")
                        .WithMany()
                        .HasForeignKey("IdRotaParada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaParada");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaDestino")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaDestino");

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaOrigem")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaOrigem");

                    b.Navigation("Rota");

                    b.Navigation("RotaParadaDestino");

                    b.Navigation("RotaParadaOrigem");
                });
#pragma warning restore 612, 618
        }
    }
}
