// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCC_API.Models.Database;

#nullable disable

namespace TCC_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230315201647_InitialDbMigration")]
    partial class InitialDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCC_API.Models.Database.Carro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdMotorista")
                        .HasColumnType("bigint");

                    b.Property<int>("Passageiros")
                        .HasColumnType("integer");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdMotorista");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Motorista", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Motoristas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Rota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdCarro")
                        .HasColumnType("bigint");

                    b.Property<long>("IdCidade")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdCarro");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdRota");

                    b.ToTable("RotaParadas");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRotaParada")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdRotaParada");

                    b.ToTable("RotaParadaHorarios");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdRota")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaDestino")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdRotaParadaOrigem")
                        .HasColumnType("bigint");

                    b.Property<double>("Preco")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdRota");

                    b.HasIndex("IdRotaParadaDestino");

                    b.HasIndex("IdRotaParadaOrigem");

                    b.ToTable("RotaPrecos");
                });

            modelBuilder.Entity("TCC_API.Models.Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Carro", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("IdMotorista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");
                });

            modelBuilder.Entity("TCC_API.Models.Database.Motorista", b =>
                {
                    b.HasOne("TCC_API.Models.Database.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParada", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("IdCarro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Cidade");

                    b.Navigation("Rota");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaParadaHorario", b =>
                {
                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParada")
                        .WithMany()
                        .HasForeignKey("IdRotaParada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RotaParada");
                });

            modelBuilder.Entity("TCC_API.Models.Database.RotaPreco", b =>
                {
                    b.HasOne("TCC_API.Models.Database.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("IdRota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaDestino")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaDestino");

                    b.HasOne("TCC_API.Models.Database.RotaParada", "RotaParadaOrigem")
                        .WithMany()
                        .HasForeignKey("IdRotaParadaOrigem");

                    b.Navigation("Rota");

                    b.Navigation("RotaParadaDestino");

                    b.Navigation("RotaParadaOrigem");
                });
#pragma warning restore 612, 618
        }
    }
}
